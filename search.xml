<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>openresty编译安装</title>
    <url>/2019/11/20/openresty/</url>
    <content><![CDATA[<h3 id="1-部署依赖包"><a href="#1-部署依赖包" class="headerlink" title="1. 部署依赖包"></a>1. 部署依赖包</h3><a id="more"></a><h3 id="2-获取插件"><a href="#2-获取插件" class="headerlink" title="2. 获取插件"></a>2. 获取插件</h3><h3 id="3-配置目录环境变量"><a href="#3-配置目录环境变量" class="headerlink" title="3. 配置目录环境变量"></a>3. 配置目录环境变量</h3><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ app_dir=<span class="string">"/data/app/openresty"</span>  </span><br><span class="line">$ log_dir=<span class="string">"/data/logs"</span></span><br></pre></td></tr></table></figure></code></pre><h3 id="4-编译安装"><a href="#4-编译安装" class="headerlink" title="4. 编译安装"></a>4. 编译安装</h3><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=<span class="variable">$&#123;app_dir&#125;</span> \</span><br><span class="line">--modules-path=<span class="variable">$&#123;app_dir&#125;</span>/nginx/modules \</span><br><span class="line">--sbin-path=<span class="variable">$&#123;app_dir&#125;</span>/nginx/sbin/nginx \</span><br><span class="line">--conf-path=<span class="variable">$&#123;app_dir&#125;</span>/nginx/conf/nginx.conf \</span><br><span class="line">--error-log-path=<span class="variable">$&#123;log_dir&#125;</span>/nginx/error.log \</span><br><span class="line">--http-log-path=<span class="variable">$&#123;log_dir&#125;</span>/nginx/access.log \</span><br><span class="line">--pid-path=<span class="variable">$&#123;app_dir&#125;</span>/nginx/run/nginx.pid \</span><br><span class="line">--lock-path=<span class="variable">$&#123;app_dir&#125;</span>/nginx/lock/nginx.lock \</span><br><span class="line">--user=www \</span><br><span class="line">--group=www \</span><br><span class="line">--with-debug \</span><br><span class="line">--with-no-pool-patch \</span><br><span class="line">--with-http_iconv_module \</span><br><span class="line">--with-luajit \</span><br><span class="line">--with-select_module \</span><br><span class="line">--with-poll_module \</span><br><span class="line">--with-threads \</span><br><span class="line">--with-file-aio \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_addition_module \</span><br><span class="line">--with-http_xslt_module \</span><br><span class="line">--with-http_xslt_module=dynamic \</span><br><span class="line">--with-http_image_filter_module \</span><br><span class="line">--with-http_image_filter_module=dynamic \</span><br><span class="line">--with-http_geoip_module \</span><br><span class="line">--with-http_geoip_module=dynamic \</span><br><span class="line">--with-http_sub_module \</span><br><span class="line">--with-http_dav_module \</span><br><span class="line">--with-http_flv_module \</span><br><span class="line">--with-http_mp4_module \</span><br><span class="line">--with-http_gunzip_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-http_auth_request_module \</span><br><span class="line">--with-http_random_index_module \</span><br><span class="line">--with-http_secure_link_module \</span><br><span class="line">--with-http_degradation_module \</span><br><span class="line">--with-http_slice_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_perl_module \</span><br><span class="line">--add-module=/usr/<span class="built_in">local</span>/src/nginx-upsync-module \</span><br><span class="line">--add-module=/usr/<span class="built_in">local</span>/src/nginx-stream-upsync-module \</span><br><span class="line">--add-module=/usr/<span class="built_in">local</span>/src/nginx-module-vts \</span><br><span class="line">--add-module=/usr/<span class="built_in">local</span>/src/nginx-http-user-agent \</span><br><span class="line">--add-module=/usr/<span class="built_in">local</span>/src/nginx_limit_speed_module \</span><br><span class="line">--add-module=/usr/<span class="built_in">local</span>/src/ModSecurity-nginx \</span><br><span class="line">--add-module=/usr/<span class="built_in">local</span>/src/ngx_http_dyups_module \</span><br><span class="line">--with-mail \</span><br><span class="line">--with-mail=dynamic \</span><br><span class="line">--with-mail_ssl_module \</span><br><span class="line">--with-stream \</span><br><span class="line">--with-stream=dynamic \</span><br><span class="line">--with-stream_ssl_module \</span><br><span class="line">--with-stream_realip_module \</span><br><span class="line">--with-stream_geoip_module \</span><br><span class="line">--with-stream_geoip_module=dynamic \</span><br><span class="line">--with-stream_ssl_preread_module \</span><br><span class="line">--with-google_perftools_module \</span><br><span class="line">--with-cpp_test_module \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-pcre</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      <categories>
        <category>nginx</category>
      </categories>
  </entry>
  <entry>
    <title>Systemd 检测服务</title>
    <url>/2019/11/20/Systemd%E6%A3%80%E6%B5%8B%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="1-进程守护"><a href="#1-进程守护" class="headerlink" title="1. 进程守护"></a>1. 进程守护</h3><a id="more"></a><p><a href="https://vincent.bernat.ch/en/blog/2017-systemd-golang" target="_blank" rel="noopener">用systemd 管理golang程序</a></p>
<p>程序启动后给systemd 发送一个完成的信号，并且systemd 采用Type=notify  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"github.com/coreos/go-systemd/daemon"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    l, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">":8081"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Panicf(<span class="string">"cannot listen: %s"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    daemon.SdNotify(<span class="literal">false</span>, <span class="string">"READY=1"</span>) <span class="comment">// ❶</span></span><br><span class="line">    daemon.SdNotify(<span class="literal">false</span>, <span class="string">"STATUS=RUNNING"</span>) <span class="comment">// ❶</span></span><br><span class="line">    http.Serve(l, <span class="literal">nil</span>)                <span class="comment">// ❷</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">● test.service - My Test</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/test.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2019-11-25 15:30:24 CST; 2s ago</span><br><span class="line"> Main PID: 27008 (1)</span><br><span class="line">   Status: <span class="string">"启动完成"</span></span><br><span class="line">    Tasks: 6</span><br><span class="line">   Memory: 780.0K</span><br><span class="line">   CGroup: /system.slice/test.service</span><br><span class="line">           └─27008 /tmp/1</span><br></pre></td></tr></table></figure>

<p>增加一个goroutine 来检测本服务是否正常，如有问题，则给systemd 发送信号</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">    _, err := http.Get(<span class="string">"http://127.0.0.1:8081"</span>) <span class="comment">// ❸</span></span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        daemon.SdNotify(<span class="literal">false</span>, <span class="string">"WATCHDOG=1"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    time.Sleep(interval / <span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>

<p>检测本服务是否正常，如果有有正确响应，则发送watchdog keep-alive ，如果服务不可用 或者http.get() 有错误，systemd 就会触发重启</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
</search>
